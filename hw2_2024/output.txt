
#TYPE: int
intintsymbol_table[0].name: main
symbol_table[0].name: 0x56298b03d184

#IDENTIFIER: main
int
#SEMICOLON: (

#SEMICOLON: )

#SEMICOLON: {

#TYPE: int
intintsymbol_table[1].name: arr
symbol_table[1].name: 0x56298b03d1c4

#IDENTIFIER: arr
int
#SEMICOLON: [

#INTEGER: 2

#SEMICOLON: ]

#SEMICOLON: ;
[<expr>2</expr>]arr[<expr>2</expr>]<array_decl>intarr[<expr>2</expr>];</array_decl>
#KEYWORD: if

#SEMICOLON: (

#INTEGER: 1

#SEMICOLON: )

#SEMICOLON: {

#SEMICOLON: }

#KEYWORD: if
if(<expr>1</expr>){}
#SEMICOLON: (

#INTEGER: 1

#SEMICOLON: )

#SEMICOLON: {

#INTEGER: 2

#SEMICOLON: ;

#KEYWORD: return

#SEMICOLON: ;

#KEYWORD: break

#SEMICOLON: ;

#KEYWORD: continue

#SEMICOLON: ;

#KEYWORD: return

#INTEGER: 1

#SEMICOLON: ;

#SEMICOLON: }
<stmt>return<expr>1</expr>;</stmt>
#KEYWORD: else

#SEMICOLON: {

#SEMICOLON: }

#TYPE: const

#TYPE: unsigned
unsigned
#TYPE: long long
longlong
#TYPE: int

#OPERATOR: *
symbol_table[2].name: ptr_57
symbol_table[2].name: 0x56298b03d204

#IDENTIFIER: ptr_57

#OPERATOR: =

#INTEGER: 5

#SEMICOLON: ;
<scalar_decl>constunsignedlonglongint*ptr_57=<expr>5</expr>;</scalar_decl>
#KEYWORD: while

#SEMICOLON: (

#INTEGER: 2

#SEMICOLON: )

#INTEGER: 1

#SEMICOLON: ;

#KEYWORD: do

#SEMICOLON: {

#INTEGER: 1

#SEMICOLON: ;

#SEMICOLON: }
<stmt><expr>1</expr>;</stmt>
#KEYWORD: while

#SEMICOLON: (

#INTEGER: 2

#SEMICOLON: )

#SEMICOLON: ;

#KEYWORD: switch

#SEMICOLON: (

#INTEGER: 1

#SEMICOLON: )

#SEMICOLON: {

#KEYWORD: case

#INTEGER: 2

#SEMICOLON: :

#KEYWORD: default

#SEMICOLON: :

#KEYWORD: default
:
#SEMICOLON: :

#SEMICOLON: }
:
#SEMICOLON: }
<stmt>switch(<expr>1</expr>){case<expr>2</expr>:default:default:}</stmt><func_def>intmain(){<array_decl>intarr[<expr>2</expr>];</array_decl><stmt>if(<expr>1</expr>){}</stmt><stmt>if(<expr>1</expr>){<stmt><expr>2</expr>;</stmt><stmt>return;</stmt><stmt>break;</stmt><stmt>continue;</stmt><stmt>return<expr>1</expr>;</stmt>}else{}</stmt><scalar_decl>constunsignedlonglongint*ptr_57=<expr>5</expr>;</scalar_decl><stmt>while(<expr>2</expr>)<stmt><expr>1</expr>;</stmt></stmt><stmt>do<stmt>{<stmt><expr>1</expr>;</stmt>}</stmt>while(<expr>2</expr>);</stmt><stmt>switch(<expr>1</expr>){case<expr>2</expr>:default:default:}</stmt>}</func_def><func_def>intmain(){<array_decl>intarr[<expr>2</expr>];</array_decl><stmt>if(<expr>1</expr>){}</stmt><stmt>if(<expr>1</expr>){<stmt><expr>2</expr>;</stmt><stmt>return;</stmt><stmt>break;</stmt><stmt>continue;</stmt><stmt>return<expr>1</expr>;</stmt>}else{}</stmt><scalar_decl>constunsignedlonglongint*ptr_57=<expr>5</expr>;</scalar_decl><stmt>while(<expr>2</expr>)<stmt><expr>1</expr>;</stmt></stmt><stmt>do<stmt>{<stmt><expr>1</expr>;</stmt>}</stmt>while(<expr>2</expr>);</stmt><stmt>switch(<expr>1</expr>){case<expr>2</expr>:default:default:}</stmt>}</func_def>
#TYPE: int
intint
#IDENTIFIER: main
int
#SEMICOLON: (

#SEMICOLON: )

#SEMICOLON: {

#TYPE: int
intint
#IDENTIFIER: arr
int
#SEMICOLON: [

#INTEGER: 2

#SEMICOLON: ]

#SEMICOLON: ;
[<expr>2</expr>]arr[<expr>2</expr>]<array_decl>intarr[<expr>2</expr>];</array_decl>
#SEMICOLON: }
<array_decl>intarr[<expr>2</expr>];</array_decl><func_def>intmain(){<array_decl>intarr[<expr>2</expr>];</array_decl>}</func_def><func_def>intmain(){<array_decl>intarr[<expr>2</expr>];</array_decl>}</func_def>
#TYPE: int
intintsymbol_table[3].name: w
symbol_table[3].name: 0x56298b03d244

#IDENTIFIER: w
int
#OPERATOR: =

#INTEGER: 0

#SEMICOLON: ;
<scalar_decl>intw=<expr>0</expr>;</scalar_decl><scalar_decl>intw=<expr>0</expr>;</scalar_decl>
#TYPE: int
intintsymbol_table[4].name: a
symbol_table[4].name: 0x56298b03d284

#IDENTIFIER: a
int
#SEMICOLON: [

#INTEGER: 0

#SEMICOLON: ]

#OPERATOR: =

#SEMICOLON: {

#INTEGER: 1

#COMMA: ,

#SEMICOLON: {

#INTEGER: 2

#SEMICOLON: }
<expr>2</expr>
#COMMA: ,

#SEMICOLON: {

#INTEGER: 3

#COMMA: ,

#INTEGER: 4

#COMMA: ,

#SEMICOLON: {

#INTEGER: 5

#SEMICOLON: }
<expr>5</expr>
#COMMA: ,

#SEMICOLON: {

#INTEGER: 6

#SEMICOLON: }
<expr>6</expr>
#SEMICOLON: }
{<expr>6</expr>}
#SEMICOLON: }
{<expr>3</expr>,<expr>4</expr>,{<expr>5</expr>},{<expr>6</expr>}}
#SEMICOLON: ;
a[<expr>0</expr>]={<expr>1</expr>,{<expr>2</expr>},{<expr>3</expr>,<expr>4</expr>,{<expr>5</expr>},{<expr>6</expr>}}}<array_decl>inta[<expr>0</expr>]={<expr>1</expr>,{<expr>2</expr>},{<expr>3</expr>,<expr>4</expr>,{<expr>5</expr>},{<expr>6</expr>}}};</array_decl><array_decl>inta[<expr>0</expr>]={<expr>1</expr>,{<expr>2</expr>},{<expr>3</expr>,<expr>4</expr>,{<expr>5</expr>},{<expr>6</expr>}}};</array_decl>
#TYPE: int
intintsymbol_table[5].name: y
symbol_table[5].name: 0x56298b03d2c4

#IDENTIFIER: y
int
#OPERATOR: =

#INTEGER: 1

#SEMICOLON: ;
<scalar_decl>inty=<expr>1</expr>;</scalar_decl><scalar_decl>inty=<expr>1</expr>;</scalar_decl>
#TYPE: int
intintsymbol_table[6].name: x
symbol_table[6].name: 0x56298b03d304

#IDENTIFIER: x
int
#SEMICOLON: [

#INTEGER: 0

#SEMICOLON: ]

#OPERATOR: =

#SEMICOLON: {

#INTEGER: 1

#COMMA: ,

#INTEGER: 1

#COMMA: ,

#SEMICOLON: {

#INTEGER: 2

#SEMICOLON: }
<expr>2</expr>
#COMMA: ,

#SEMICOLON: {

#INTEGER: 3

#COMMA: ,

#INTEGER: 4

#COMMA: ,

#SEMICOLON: {

#INTEGER: 5

#SEMICOLON: }
<expr>5</expr>
#COMMA: ,

#SEMICOLON: {

#INTEGER: 6

#SEMICOLON: }
<expr>6</expr>
#SEMICOLON: }
{<expr>6</expr>}
#COMMA: ,

#INTEGER: 7

#SEMICOLON: }
<expr>7</expr>
#SEMICOLON: ;
x[<expr>0</expr>]={<expr>1</expr>,<expr>1</expr>,{<expr>2</expr>},{<expr>3</expr>,<expr>4</expr>,{<expr>5</expr>},{<expr>6</expr>}},<expr>7</expr>}<array_decl>intx[<expr>0</expr>]={<expr>1</expr>,<expr>1</expr>,{<expr>2</expr>},{<expr>3</expr>,<expr>4</expr>,{<expr>5</expr>},{<expr>6</expr>}},<expr>7</expr>};</array_decl><array_decl>intx[<expr>0</expr>]={<expr>1</expr>,<expr>1</expr>,{<expr>2</expr>},{<expr>3</expr>,<expr>4</expr>,{<expr>5</expr>},{<expr>6</expr>}},<expr>7</expr>};</array_decl>
#TYPE: int
intintsymbol_table[7].name: e
symbol_table[7].name: 0x56298b03d344

#IDENTIFIER: e
int
#SEMICOLON: [

#INTEGER: 1

#SEMICOLON: ]

#SEMICOLON: [

#INTEGER: 3

#SEMICOLON: ]

#COMMA: ,
[<expr>3</expr>]symbol_table[8].name: p
symbol_table[8].name: 0x56298b03d384

#IDENTIFIER: p

#SEMICOLON: [

#INTEGER: 1

#SEMICOLON: ]

#SEMICOLON: [

#INTEGER: 3

#SEMICOLON: ]

#SEMICOLON: ;
[<expr>3</expr>]p[<expr>1</expr>][<expr>3</expr>]<array_decl>inte[<expr>1</expr>][<expr>3</expr>],p[<expr>1</expr>][<expr>3</expr>];</array_decl><array_decl>inte[<expr>1</expr>][<expr>3</expr>],p[<expr>1</expr>][<expr>3</expr>];</array_decl>
#TYPE: char
charcharsymbol_table[9].name: f
symbol_table[9].name: 0x56298b03d3c4

#IDENTIFIER: f
char
#SEMICOLON: [

#INTEGER: 1

#SEMICOLON: ]

#SEMICOLON: [

#INTEGER: 4

#SEMICOLON: ]

#SEMICOLON: ;
[<expr>4</expr>]f[<expr>1</expr>][<expr>4</expr>]<array_decl>charf[<expr>1</expr>][<expr>4</expr>];</array_decl><array_decl>charf[<expr>1</expr>][<expr>4</expr>];</array_decl>
#TYPE: float
floatsymbol_table[10].name: k
symbol_table[10].name: 0x56298b03d404

#IDENTIFIER: k
float
#SEMICOLON: [

#INTEGER: 1

#SEMICOLON: ]

#COMMA: ,
[<expr>1</expr>]symbol_table[11].name: b
symbol_table[11].name: 0x56298b03d444

#IDENTIFIER: b

#SEMICOLON: [

#INTEGER: 2

#SEMICOLON: ]

#SEMICOLON: [

#INTEGER: 3

#SEMICOLON: ]

#OPERATOR: =

#SEMICOLON: {

#SEMICOLON: {

#INTEGER: 0

#COMMA: ,

#INTEGER: 1

#COMMA: ,

#INTEGER: 2

#SEMICOLON: }
<expr>2</expr>
#COMMA: ,

#SEMICOLON: {

#INTEGER: 3

#COMMA: ,

#INTEGER: 4

#COMMA: ,

#INTEGER: 5

#SEMICOLON: }
<expr>5</expr>
#SEMICOLON: }
{<expr>3</expr>,<expr>4</expr>,<expr>5</expr>}
#SEMICOLON: ;
b[<expr>2</expr>][<expr>3</expr>]={{<expr>0</expr>,<expr>1</expr>,<expr>2</expr>},{<expr>3</expr>,<expr>4</expr>,<expr>5</expr>}}<array_decl>floatk[<expr>1</expr>],b[<expr>2</expr>][<expr>3</expr>]={{<expr>0</expr>,<expr>1</expr>,<expr>2</expr>},{<expr>3</expr>,<expr>4</expr>,<expr>5</expr>}};</array_decl><array_decl>floatk[<expr>1</expr>],b[<expr>2</expr>][<expr>3</expr>]={{<expr>0</expr>,<expr>1</expr>,<expr>2</expr>},{<expr>3</expr>,<expr>4</expr>,<expr>5</expr>}};</array_decl>
#TYPE: int
intintsymbol_table[12].name: indd
symbol_table[12].name: 0x56298b03d484

#IDENTIFIER: indd
int
#SEMICOLON: (

#TYPE: int
intint
#OPERATOR: *
symbol_table[13].name: sdf
symbol_table[13].name: 0x56298b03d4c4

#IDENTIFIER: sdf

#SEMICOLON: )
int*sdf
#SEMICOLON: ;
<func_decl>intindd(int*sdf);</func_decl><func_decl>intindd(int*sdf);</func_decl>
#TYPE: const

#TYPE: signed
signedsymbol_table[14].name: var_02
symbol_table[14].name: 0x56298b03d504

#IDENTIFIER: var_02
signed
#OPERATOR: =

#INTEGER: 5

#SEMICOLON: ;
<scalar_decl>constsignedvar_02=<expr>5</expr>;</scalar_decl><scalar_decl>constsignedvar_02=<expr>5</expr>;</scalar_decl>
#TYPE: int
intintsymbol_table[15].name: var_42
symbol_table[15].name: 0x56298b03d544

#IDENTIFIER: var_42
int
#OPERATOR: =

#INTEGER: 5

#SEMICOLON: ;
<scalar_decl>intvar_42=<expr>5</expr>;</scalar_decl><scalar_decl>intvar_42=<expr>5</expr>;</scalar_decl>
#TYPE: const

#TYPE: signed
signed
#TYPE: int
intsymbol_table[16].name: var_43
symbol_table[16].name: 0x56298b03d584

#IDENTIFIER: var_43

#OPERATOR: =

#INTEGER: 5

#SEMICOLON: ;
<scalar_decl>constsignedintvar_43=<expr>5</expr>;</scalar_decl><scalar_decl>constsignedintvar_43=<expr>5</expr>;</scalar_decl>
#TYPE: const

#OPERATOR: *
symbol_table[17].name: ptr_01
symbol_table[17].name: 0x56298b03d5c4

#IDENTIFIER: ptr_01

#OPERATOR: =

#INTEGER: 5

#SEMICOLON: ;
<scalar_decl>const*ptr_01=<expr>5</expr>;</scalar_decl><scalar_decl>const*ptr_01=<expr>5</expr>;</scalar_decl>
#TYPE: const

#TYPE: unsigned
unsigned
#TYPE: long long
longlong
#TYPE: int

#OPERATOR: *

#IDENTIFIER: ptr_57

#OPERATOR: =

#INTEGER: 5

#SEMICOLON: ;
<scalar_decl>constunsignedlonglongint*ptr_57=<expr>5</expr>;</scalar_decl><scalar_decl>constunsignedlonglongint*ptr_57=<expr>5</expr>;</scalar_decl><scalar_decl>constunsignedlonglongint*ptr_57=<expr>5</expr>;</scalar_decl><func_def>intmain(){<array_decl>intarr[<expr>2</expr>];</array_decl><stmt>if(<expr>1</expr>){}</stmt><stmt>if(<expr>1</expr>){<stmt><expr>2</expr>;</stmt><stmt>return;</stmt><stmt>break;</stmt><stmt>continue;</stmt><stmt>return<expr>1</expr>;</stmt>}else{}</stmt><scalar_decl>constunsignedlonglongint*ptr_57=<expr>5</expr>;</scalar_decl><stmt>while(<expr>2</expr>)<stmt><expr>1</expr>;</stmt></stmt><stmt>do<stmt>{<stmt><expr>1</expr>;</stmt>}</stmt>while(<expr>2</expr>);</stmt><stmt>switch(<expr>1</expr>){case<expr>2</expr>:default:default:}</stmt>}</func_def><func_def>intmain(){<array_decl>intarr[<expr>2</expr>];</array_decl>}</func_def><scalar_decl>intw=<expr>0</expr>;</scalar_decl><array_decl>inta[<expr>0</expr>]={<expr>1</expr>,{<expr>2</expr>},{<expr>3</expr>,<expr>4</expr>,{<expr>5</expr>},{<expr>6</expr>}}};</array_decl><scalar_decl>inty=<expr>1</expr>;</scalar_decl><array_decl>intx[<expr>0</expr>]={<expr>1</expr>,<expr>1</expr>,{<expr>2</expr>},{<expr>3</expr>,<expr>4</expr>,{<expr>5</expr>},{<expr>6</expr>}},<expr>7</expr>};</array_decl><array_decl>inte[<expr>1</expr>][<expr>3</expr>],p[<expr>1</expr>][<expr>3</expr>];</array_decl><array_decl>charf[<expr>1</expr>][<expr>4</expr>];</array_decl><array_decl>floatk[<expr>1</expr>],b[<expr>2</expr>][<expr>3</expr>]={{<expr>0</expr>,<expr>1</expr>,<expr>2</expr>},{<expr>3</expr>,<expr>4</expr>,<expr>5</expr>}};</array_decl><func_decl>intindd(int*sdf);</func_decl><scalar_decl>constsignedvar_02=<expr>5</expr>;</scalar_decl><scalar_decl>intvar_42=<expr>5</expr>;</scalar_decl><scalar_decl>constsignedintvar_43=<expr>5</expr>;</scalar_decl><scalar_decl>const*ptr_01=<expr>5</expr>;</scalar_decl><scalar_decl>constunsignedlonglongint*ptr_57=<expr>5</expr>;</scalar_decl>